{"version":3,"sources":["components/componentStyles/AlgoButtonStyles.tsx","components/AlgorithmButtons.tsx","components/componentStyles/SortControlStyles.tsx","components/SortControl.tsx","AppStyles.tsx","sortingAlgorithms/BubbleSort.ts","sortingAlgorithms/MergeSort.ts","sortingAlgorithms/algoHelpers.ts","sortingAlgorithms/QuickSort.ts","components/componentStyles/AlgoArrayStyles.tsx","components/AlgorithmArray.tsx","hooks/useSortingVisualizer.tsx","hooks/useArray.tsx","components/componentStyles/AlgorithmDataStyles.tsx","components/AlgorithmData.tsx","App.tsx","index.tsx"],"names":["AlgoButton","styled","button","_templateObject","_taggedTemplateLiteral","props","hue","AlgoBtnGroup","div","_templateObject2","SortingAlgorithmsArray","Algorithm","QUICK","BUBBLE","MERGE","SortingAlgorithmBtns","_ref","setAlgorithm","SortingAlgorithmBtn","_ref2","algorithm","buttonHue","index","algorithmName","slice","toLowerCase","_jsx","onClick","changeAlgo","children","concat","map","sort","idx","SortControlContainer","ControlButton","bg","bgh","LengthInput","input","_templateObject3","ControlInputGroup","_templateObject4","ControlRangeInputSection","_templateObject5","ControlBtnGroup","_templateObject6","DataToggleButton","_templateObject7","showData","SortControl","getRandomArray","lengthInputRef","setSize","setIsSorting","setSortingSpeed","isSorted","setShowData","_jsxs","htmlFor","ref","onChange","e","target","value","type","max","min","id","Array","isArray","prev","GlobalStyle","createGlobalStyle","AppContainer","ContainerTitle","h1","bubbleSort","sortLineArray","animations","i","length","j","iter","push","array","_toConsumableArray","indexes","mergeSortHelper","start","end","statesInOrder","mid","Math","floor","k","pilesC","temp","merge","mergeSort","sortedEntries","obj","Object","entries","a","b","isEqual","arrA","arrB","prototype","toString","call","quickSort","low","high","pivotIndex","pivotValue","pivot","partition","arr","dict","Set","result","currentElem","JSON","stringify","has","add","removeDuplicates","SortLine","isPivot","lineHue","SortLines","AlgorithmArray","currentLine","componentLinesRef","useRef","_useState","useState","setWidth","_slicedToArray","trackScreenWidth","_componentLinesRef$cu","_componentLinesRef$cu2","current","offsetWidth","useEffect","window","addEventListener","removeEventListener","SortLineComponent","_componentLinesRef$cu3","_componentLinesRef$cu4","_componentLinesRef$cu5","_componentLinesRef$cu6","_currentLine$lineData","_currentLine$lineData2","num","arrLength","lineWidth","style","height","offsetHeight","left","width","isLineSelected","isSorting","lineData","currentIndexes","includes","indexOf","_ref3","useSortingVisualizer","setArray","sortingSpeed","setIsSorted","_useState2","setCurrentIndexes","animationSpeed","handleAnimation","arguments","undefined","sortedArr","console","log","setTimeout","_bubbleSort","_mergeSort","_quickSort","newAnimationsArray","Error","startAnimation","algorithmArrayProps","_objectSpread","useArray","size","numbers","from","_","random","DataContainer","ComplexitiesContainer","ComplexityTitle","span","ComplixtyContainer","AlgorithmData","getAlgorithmComplexity","timeComplexity","worstCase","averageCase","spaceComplexity","complexity","setComplexity","App","_useState3","_useState4","_useState5","_useState6","_useArray","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","capitalizedAlgorithm","sortControlProps","useSortingVisualizerProps","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.2cfbaf29.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const AlgoButton = styled.button<{ hue: number }>`\n  background-color: hsl(${(props) => props.hue}, 88%, 70%);\n  cursor: pointer;\n  border: none;\n  padding: 0.5em 1.2em;\n  border-radius: 7px;\n  color: white;\n  font-weight: bold;\n  transition: 0.325s ease-in-out;\n  white-space: nowrap;\n  flex-basis: 7.5rem;\n\n  &:hover {\n    transform: scale(1.05);\n    background-color: hsl(${(props) => props.hue}, 88%, 60%);\n  }\n`;\n\nexport const AlgoBtnGroup = styled.div`\n  display: flex;\n  gap: 0.7rem;\n\n  @media (max-width: 400px) {\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n  }\n`;\n","import { Dispatch, SetStateAction } from \"react\";\nimport { Algorithm } from \"../App\";\nimport { AlgoButton, AlgoBtnGroup } from \"./componentStyles/AlgoButtonStyles\";\n\nconst SortingAlgorithmsArray: Algorithm[] = [\n  Algorithm.QUICK,\n  Algorithm.BUBBLE,\n  Algorithm.MERGE\n];\n\ninterface SortingAlgoBtnsProps {\n  setAlgorithm: Dispatch<SetStateAction<Algorithm>>;\n}\n\ninterface SortingAlgoBtnProps {\n  algorithm: Algorithm;\n  index: number;\n}\n\nconst SortingAlgorithmBtns = ({ setAlgorithm }: SortingAlgoBtnsProps) => {\n  const changeAlgo = (algorithm: Algorithm) => {\n    setAlgorithm(algorithm);\n  };\n\n  const SortingAlgorithmBtn = ({ algorithm, index }: SortingAlgoBtnProps) => {\n    const buttonHue = index * 100;\n    const algorithmName = algorithm.slice(0, 1) + algorithm.slice(1).toLowerCase();\n    return (\n      <AlgoButton hue={buttonHue} onClick={() => changeAlgo(algorithm)}>\n        {`${algorithmName} Sort`}\n      </AlgoButton>\n    );\n  };\n\n  return (\n    <AlgoBtnGroup>\n      {SortingAlgorithmsArray.map((sort, idx) => (\n        <SortingAlgorithmBtn key={idx} index={idx} algorithm={sort} />\n      ))}\n    </AlgoBtnGroup>\n  );\n};\n\nexport default SortingAlgorithmBtns;\n","import styled from \"styled-components\";\n\nexport const SortControlContainer = styled.div`\n  display: flex;\n  gap: 1rem;\n  justify-content: space-evenly;\n  width: 100%;\n  flex-wrap: wrap;\n`;\n\ninterface ControlButtonProps {\n  bg: string;\n  bgh: string;\n}\n\nexport const ControlButton = styled.button<ControlButtonProps>`\n  padding: 0.4em 1.3em;\n  border: none;\n  border-radius: 7px;\n  cursor: pointer;\n  color: white;\n  font-weight: bold;\n  font-size: 1.1rem;\n  transition: 0.325s ease-in-out;\n  background-color: ${(props) => props.bg};\n\n  &:hover {\n    transform: scale(1.05);\n    background-color: ${(props) => props.bgh};\n  }\n`;\n\nexport const LengthInput = styled.input`\n  padding: 3px;\n  cursor: pointer;\n`;\n\nexport const ControlInputGroup = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 5px;\n  flex-wrap: wrap;\n  flex-direction: column;\n\n  & > label {\n    font-size: 1.3rem;\n  }\n`;\n\nexport const ControlRangeInputSection = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 5px;\n`;\n\nexport const ControlBtnGroup = styled.div`\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n`;\n\nexport const DataToggleButton = styled.button<{ showData: boolean }>`\n  box-shadow: ${(props) =>\n    !props.showData\n      ? \"0px 0px rgba(0, 0, 0, 0.1)\"\n      : \"inset 3px 3px 5px rgba(0, 0, 0, 0.1), inset -2px -2px 5px #fff\"};\n  padding: 0.4em 1.3em;\n  border: none;\n  border-radius: 7px;\n  cursor: pointer;\n  font-weight: bold;\n  transition: 0.325s ease-in-out;\n  font-size: 1.1rem;\n  white-space: nowrap;\n`;\n","import {\n  SortControlContainer,\n  ControlButton,\n  LengthInput,\n  ControlInputGroup,\n  ControlBtnGroup,\n  ControlRangeInputSection,\n  DataToggleButton\n} from \"./componentStyles/SortControlStyles\";\n\ninterface SortControlProps {\n  getRandomArray: () => void;\n  lengthInputRef: React.MutableRefObject<HTMLInputElement | null>;\n  setSize: React.Dispatch<React.SetStateAction<number>>;\n  setIsSorting: React.Dispatch<React.SetStateAction<boolean>>;\n  setSortingSpeed: React.Dispatch<React.SetStateAction<number>>;\n  isSorted: boolean;\n  showData: boolean;\n  setShowData: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst SortControl = ({\n  getRandomArray,\n  lengthInputRef,\n  setSize,\n  setIsSorting,\n  setSortingSpeed,\n  isSorted,\n  showData,\n  setShowData\n}: SortControlProps) => {\n  const sortArray = () => {\n    if (isSorted) {\n      getRandomArray();\n    }\n    setIsSorting(true);\n  };\n\n  return (\n    <SortControlContainer>\n      <ControlInputGroup>\n        <ControlRangeInputSection>\n          <label htmlFor=\"sort-length\">Size:</label>\n          <LengthInput\n            ref={lengthInputRef}\n            onChange={(e) => setSize(+e.target.value)}\n            type=\"range\"\n            max={70}\n            min={10}\n            id=\"sort-length\"\n          />\n        </ControlRangeInputSection>\n        <ControlRangeInputSection>\n          <label htmlFor=\"sort-speed\">Speed:</label>\n          <LengthInput\n            onChange={(e) => setSortingSpeed(+e.target.value)}\n            type=\"range\"\n            max={99}\n            min={1}\n            id=\"sort-speed\"\n          />\n        </ControlRangeInputSection>\n      </ControlInputGroup>\n      <ControlBtnGroup>\n        <ControlButton\n          bg=\"hsl(27, 87%, 60%)\"\n          bgh=\"hsl(27, 87%, 50%)\"\n          onClick={() => !Array.isArray(getRandomArray) && getRandomArray()}\n        >\n          Shuffle\n        </ControlButton>\n        <ControlButton onClick={sortArray} bg=\"#999\" bgh=\"#777\">\n          Sort\n        </ControlButton>\n        <DataToggleButton\n          showData={showData}\n          onClick={() => setShowData((prev) => !prev)}\n        >\n          Big O\n        </DataToggleButton>\n      </ControlBtnGroup>\n    </SortControlContainer>\n  );\n};\n\nexport default SortControl;\n","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  /* Box sizing rules */\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  /* Remove default margin */\n  body,\n  h1,\n  h2,\n  h3,\n  h4,\n  p,\n  figure,\n  blockquote,\n  dl,\n  dd {\n    margin: 0;\n  }\n\n  /* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\n  ul[role=\"list\"],\n  ol[role=\"list\"] {\n    list-style: none;\n  }\n\n  /* Set core root defaults */\n  html:focus-within {\n    scroll-behavior: smooth;\n  }\n\n  /* Set core body defaults */\n  body {\n    min-height: 100%;\n    text-rendering: optimizeSpeed;\n    line-height: 1.5;\n    font-family: \"Roboto\";\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #f9f9f9;\n    overflow-x: hidden;\n  }\n\n  html, #root, body {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  /* A elements that don't have a class get default styles */\n  a:not([class]) {\n    text-decoration-skip-ink: auto;\n  }\n\n  /* Make images easier to work with */\n  img,\n  picture {\n    max-width: 100%;\n    display: block;\n  }\n\n  /* Inherit fonts for inputs and buttons */\n  input,\n  button,\n  textarea,\n  select {\n    font: inherit;\n  }\n\n  /* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n  @media (prefers-reduced-motion: reduce) {\n    html:focus-within {\n      scroll-behavior: auto;\n    }\n\n    *,\n    *::before,\n    *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n    }\n  }\n`;\n\nexport const AppContainer = styled.div`\n  width: max(75vw, 300px);\n  max-width: 800px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 1.3rem;\n  border-radius: 15px;\n  background-color: white;\n  -webkit-box-shadow: 10px 15px 13px -1px rgba(0, 0, 0, 0.11);\n  -moz-box-shadow: 10px 15px 13px -1px rgba(0, 0, 0, 0.11);\n  box-shadow: 10px 15px 13px -1px rgba(0, 0, 0, 0.11);\n  gap: 1rem;\n\n  @media (max-width: 510px) {\n    width: 100%;\n    height: 100%;\n    justify-content: space-evenly;\n  }\n`;\n\nexport const ContainerTitle = styled.h1`\n  font-size: 1.6rem;\n  text-align: center;\n`;\n","import { AnimationsArray } from \"./algoHelpers\";\n\nconst bubbleSort = (sortLineArray: number[]): AnimationsArray => {\n  let animations = [];\n  for (let i = 0; i < sortLineArray.length; i++) {\n    for (let j = 0; j < sortLineArray.length - i - 1; j++) {\n      let itemA = sortLineArray[j];\n      let itemB = sortLineArray[j + 1];\n      if (itemA > itemB) {\n        let iter = sortLineArray[j];\n        sortLineArray[j] = sortLineArray[j + 1];\n        sortLineArray[j + 1] = iter;\n        animations.push({ array: [...sortLineArray], indexes: [j, j + 1] });\n      }\n    }\n  }\n  return animations;\n};\n\nexport default bubbleSort;\n","import { AnimationsArray } from \"./algoHelpers\";\n\nfunction merge(\n  array: number[],\n  start: number,\n  mid: number,\n  end: number,\n  statesInOrder: AnimationsArray\n) {\n  let k = start,\n    i = start,\n    j = mid + 1;\n  let pilesC = array.slice();\n  while (i <= mid && j <= end) {\n    if (pilesC[i] <= pilesC[j]) {\n      array[k++] = pilesC[i++];\n    } else {\n      array[k++] = pilesC[j++];\n    }\n    const temp = { array: array.slice(), indexes: [i, j, k] };\n    statesInOrder.push(temp);\n  }\n  while (i <= mid) {\n    array[k++] = pilesC[i++];\n    const temp = { array: array.slice(), indexes: [i, k] };\n    statesInOrder.push(temp);\n  }\n  while (j <= end) {\n    array[k++] = pilesC[j++];\n    const temp = { array: array.slice(), indexes: [j, k] };\n    statesInOrder.push(temp);\n  }\n}\n\nfunction mergeSortHelper(\n  array: number[],\n  start: number,\n  end: number,\n  statesInOrder: AnimationsArray\n) {\n  if (start === end) return;\n  const mid = Math.floor((start + end) / 2);\n  mergeSortHelper(array, start, mid, statesInOrder);\n  mergeSortHelper(array, mid + 1, end, statesInOrder);\n  merge(array, start, mid, end, statesInOrder);\n}\n\nfunction mergeSort(array: number[]): AnimationsArray {\n  let statesInOrder: AnimationsArray = [];\n  mergeSortHelper(array, 0, array.length - 1, statesInOrder);\n  return statesInOrder;\n}\n\nexport default mergeSort;\n","const sortedEntries = (obj: Object): [string, any][] => {\n  return Object.entries(obj).sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n};\n\nexport const isEqual = (arrA: any[], arrB: any[]): boolean => {\n  if (arrA.length !== arrB.length) return false;\n  for (let i = 0; i < arrA.length; i++) {\n    if (typeof arrA[i] !== typeof arrB[i]) return false;\n    if (Object.prototype.toString.call(arrA[i]) === \"\" + {}) {\n      if (!isEqual(sortedEntries(arrA[i]), sortedEntries(arrB[i]))) {\n        return false;\n      }\n    } else if (Array.isArray(arrA[i])) {\n      if (!isEqual(arrA[i], arrB[i])) return false;\n    } else {\n      if (arrA[i] !== arrB[i]) return false;\n    }\n  }\n  return true;\n};\n\nexport type AnimationsArray = {\n  array: number[];\n  indexes: number[];\n  pivot?: number;\n}[];\n\nexport function removeDuplicates(arr: AnimationsArray) {\n  const dict = new Set();\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let currentElem = JSON.stringify(arr[i]);\n    if (!dict.has(currentElem)) {\n      result.push(arr[i]);\n    }\n    dict.add(currentElem);\n  }\n  return result;\n}\n","import { removeDuplicates, AnimationsArray } from \"./algoHelpers\";\n\nfunction quickSort(array: number[]): AnimationsArray {\n  const animations: AnimationsArray = [];\n\n  if (array.length <= 1) {\n    return animations;\n  }\n\n  const partition = (low: number, high: number): number => {\n    let pivotIndex = low;\n    let pivotValue = array[low];\n    animations.push({\n      array: [...array],\n      indexes: [low, pivotIndex],\n      pivot: high\n    });\n\n    for (let i = low + 1; i <= high; i++) {\n      animations.push({\n        array: [...array],\n        indexes: [i, pivotIndex],\n        pivot: high\n      });\n\n      if (array[i] < pivotValue) {\n        pivotIndex++;\n        animations.push({\n          array: [...array],\n          indexes: [i, pivotIndex],\n          pivot: high\n        });\n        [array[i], array[pivotIndex]] = [array[pivotIndex], array[i]];\n        animations.push({\n          array: [...array],\n          indexes: [i, pivotIndex],\n          pivot: high\n        });\n      }\n    }\n\n    [array[low], array[pivotIndex]] = [array[pivotIndex], array[low]];\n    animations.push({\n      array: [...array],\n      indexes: [low, pivotIndex],\n      pivot: high\n    });\n    return pivotIndex;\n  };\n\n  const sort = (low: number, high: number): void => {\n    if (low < high) {\n      const pivotIndex = partition(low, high);\n      sort(low, pivotIndex);\n      sort(pivotIndex + 1, high);\n    }\n  };\n\n  sort(0, array.length - 1);\n  return removeDuplicates(animations);\n}\n\nexport default quickSort;\n","import styled from \"styled-components\";\n\ntype SortLineStyleProps = {\n  isPivot: boolean;\n  lineHue: number;\n};\n\nexport const SortLine = styled.div<SortLineStyleProps>`\n  position: absolute;\n  background-color: ${(props) =>\n    props.isPivot\n      ? `hsl(300, 83%, 65%)`\n      : `hsl(${props.lineHue}, 83%, 65%)`};\n  border: 1px solid;\n\n  &:hover > div {\n    display: block;\n  }\n`;\n\nexport const SortLines = styled.div`\n  position: relative;\n  transform: translate(-50%, -50%);\n  transform: rotate(180deg);\n  max-width: 100%;\n  background-color: #fafafa;\n  width: 100%;\n  height: 300px;\n  border-radius: 15px;\n`;\n","import { useRef, useEffect, useState } from \"react\";\nimport {\n  SortLine,\n  SortLines\n} from \"./componentStyles/AlgoArrayStyles\";\nimport { AnimationIndexes } from \"../hooks/useSortingVisualizer\";\n\ntype SortingLineProps = {\n  num: number;\n  arrLength: number;\n  idx: number;\n};\n\nexport type SortLinesComponentProps = {\n  array: number[];\n  currentLine?: {\n    isSorting: boolean;\n    lineData: AnimationIndexes;\n  };\n};\n\nconst AlgorithmArray = ({ array, currentLine }: SortLinesComponentProps) => {\n  const componentLinesRef = useRef<HTMLDivElement | null>(null);\n  const [, setWidth] = useState(0);\n\n  const trackScreenWidth = () => {\n    setWidth(componentLinesRef.current?.offsetWidth ?? 0);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", trackScreenWidth);\n\n    return () => {\n      return window.removeEventListener(\"resize\", trackScreenWidth);\n    };\n  }, []);\n\n  const SortLineComponent = ({ num, arrLength, idx }: SortingLineProps) => {\n    const lineWidth =\n      (componentLinesRef.current?.offsetWidth ?? 10) / arrLength;\n    let lineHeight =\n      (componentLinesRef.current?.offsetHeight ?? 300) / arrLength;\n\n    const style: React.CSSProperties = {\n      height: lineHeight * num,\n      left: idx * lineWidth,\n      width: lineWidth\n    };\n\n    const isLineSelected =\n      !!currentLine?.isSorting &&\n      currentLine?.lineData?.currentIndexes.includes(idx);\n\n    const isPivot =\n      !!currentLine?.isSorting && currentLine?.lineData.pivot === idx;\n\n    const lineHue = isLineSelected\n      ? currentLine?.lineData?.currentIndexes.indexOf(idx) * 100 + 50\n      : 212;\n\n    return (\n      <SortLine {...{ lineHue, isPivot, style }}>\n        {/* <SortLineNum>{num}</SortLineNum> */}\n      </SortLine>\n    );\n  };\n\n  return (\n    <SortLines ref={componentLinesRef}>\n      {array.map((num, idx, { length: arrLength }) => (\n        <SortLineComponent\n          key={idx}\n          num={num}\n          arrLength={arrLength}\n          idx={idx}\n        />\n      ))}\n    </SortLines>\n  );\n};\n\nexport default AlgorithmArray;\n","import { useState, useEffect } from \"react\";\nimport bubbleSort from \"../sortingAlgorithms/BubbleSort\";\nimport mergeSort from \"../sortingAlgorithms/MergeSort\";\nimport quickSort from \"../sortingAlgorithms/QuickSort\";\nimport AlgorithmArray from \"../components/AlgorithmArray\";\nimport { Algorithm } from \"../App\";\nimport { SortLinesComponentProps } from \"../components/AlgorithmArray\";\nimport { isEqual } from \"../sortingAlgorithms/algoHelpers\";\n\ntype AnimationsArray = {\n  array: number[];\n  indexes: number[];\n  pivot?: number;\n}[];\n\ninterface SortingVisualizerProps {\n  array: number[];\n  algorithm: Algorithm;\n  isSorting: boolean;\n  setArray: React.Dispatch<React.SetStateAction<number[]>>;\n  setIsSorting: React.Dispatch<React.SetStateAction<boolean>>;\n  sortingSpeed: number;\n  setIsSorted: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport type AnimationIndexes = {\n  currentIndexes: number[];\n  pivot?: number;\n};\n\nconst useSortingVisualizer = ({\n  array,\n  algorithm,\n  isSorting,\n  setArray,\n  setIsSorting,\n  sortingSpeed,\n  setIsSorted\n}: SortingVisualizerProps): JSX.Element => {\n  const [currentIndexes, setCurrentIndexes] = useState<AnimationIndexes>({\n    currentIndexes: []\n  });\n  const animationSpeed = (2000 / array.length) * ((100 - sortingSpeed) / 100);\n\n  const handleAnimation = (animations: AnimationsArray, index = 0) => {\n    if (animations[index] == null || !(\"indexes\" in animations[index])) return;\n\n    setCurrentIndexes({\n      currentIndexes: animations[index].indexes,\n      pivot: animations[index].pivot\n    });\n\n    const sortedArr = array.sort((a, b) => a - b);\n    if (isEqual(animations[index].array, sortedArr)) {\n      console.log(\"Animation Done\");\n      setIsSorted(true);\n      setIsSorting(false);\n    } else {\n      setTimeout(() => handleAnimation(animations, index + 1), animationSpeed);\n    }\n    setArray(animations[index].array);\n  };\n\n  const startAnimation = () => {\n    let newAnimationsArray: AnimationsArray = [];\n    switch (algorithm) {\n      case Algorithm.BUBBLE:\n        newAnimationsArray = bubbleSort(array) ?? [];\n        break;\n      case Algorithm.MERGE:\n        newAnimationsArray = mergeSort(array) ?? [];\n        break;\n      case Algorithm.QUICK:\n        newAnimationsArray = quickSort(array) ?? [];\n        break;\n      default:\n        throw new Error(algorithm + \" is not a valid algorithm.\");\n    }\n\n    handleAnimation(newAnimationsArray);\n  };\n\n  useEffect(() => {\n    if (isSorting) {\n      startAnimation();\n    }\n  }, [isSorting]);\n\n  const algorithmArrayProps: SortLinesComponentProps = {\n    array,\n    currentLine: {\n      isSorting,\n      lineData: currentIndexes\n    }\n  };\n\n  return <AlgorithmArray {...algorithmArrayProps} />;\n};\n\nexport default useSortingVisualizer;\n","import { useState, useEffect } from \"react\";\n\ntype UseArrayProps = {\n  size: number;\n  setIsSorted: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst useArray = ({ size, setIsSorted }: UseArrayProps) => {\n  const [array, setArray] = useState<number[]>([]);\n\n  const getRandomArray = () => {\n    setIsSorted(false);\n    const numbers = Array.from({ length: size }, (_, i) => i + 1);\n    numbers.sort(() => Math.random() - 0.5);\n    setArray(numbers);\n  };\n\n  useEffect(() => {\n    getRandomArray();\n  }, []);\n\n  return { array, setArray, getRandomArray };\n};\n\nexport default useArray;\n","import styled from \"styled-components\";\n\nexport const DataContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border: 2px solid #404040;\n  border-radius: 10px;\n  padding: 1rem;\n  gap: 1rem;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n`;\n\nexport const ComplexitiesContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 1.5rem;\n  width: 100%;\n`;\n\nexport const ComplexityTitle = styled.span`\n  font-size: 1.3rem;\n`;\n\nexport const ComplixtyContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import { useState, useEffect } from \"react\";\nimport { Algorithm } from \"../App\";\nimport {\n  DataContainer,\n  ComplexitiesContainer,\n  ComplexityTitle,\n  ComplixtyContainer\n} from \"./componentStyles/AlgorithmDataStyles\";\n\ntype BigONotation = {\n  worstCase: string;\n  averageCase: string;\n};\n\ntype Complexity = {\n  timeComplexity: BigONotation;\n  spaceComplexity: BigONotation;\n};\n\nconst AlgorithmData = ({ algorithm }: { algorithm: Algorithm }) => {\n  const getAlgorithmComplexity = (algorithm: Algorithm): Complexity => {\n    switch (algorithm) {\n      case Algorithm.BUBBLE:\n        return {\n          timeComplexity: { worstCase: \"O(n^2)\", averageCase: \"O(n^2)\" },\n          spaceComplexity: { worstCase: \"O(1)\", averageCase: \"O(1)\" }\n        };\n      case Algorithm.MERGE:\n        return {\n          timeComplexity: {\n            worstCase: \"O(n * log(n))\",\n            averageCase: \"O(n * log(n))\"\n          },\n          spaceComplexity: { worstCase: \"O(n)\", averageCase: \"O(n)\" }\n        };\n      case Algorithm.QUICK:\n        return {\n          timeComplexity: { worstCase: \"O(n^2)\", averageCase: \"O(n * log(n))\" },\n          spaceComplexity: { worstCase: \"O(n)\", averageCase: \"O(log(n))\" }\n        };\n      default:\n        return {\n          timeComplexity: { worstCase: \"O(n^2)\", averageCase: \"O(n^2)\" },\n          spaceComplexity: { worstCase: \"O(1)\", averageCase: \"O(1)\" }\n        };\n    }\n  };\n\n  const [complexity, setComplexity] = useState<Complexity>(\n    getAlgorithmComplexity(algorithm)\n  );\n\n  useEffect(() => {\n    setComplexity(getAlgorithmComplexity(algorithm));\n  }, [algorithm]);\n\n  return (\n    <DataContainer>\n      <ComplixtyContainer>\n        <ComplexityTitle>Time Complexity</ComplexityTitle>\n        <ComplexitiesContainer>\n          <span>Worst case: {complexity.timeComplexity.worstCase}</span>\n          <span>Average case: {complexity.timeComplexity.averageCase}</span>\n        </ComplexitiesContainer>\n      </ComplixtyContainer>\n      <ComplixtyContainer>\n        <ComplexityTitle>Space Complexity</ComplexityTitle>\n        <ComplexitiesContainer>\n          <span>Worst case: {complexity.spaceComplexity.worstCase}</span>\n          <span>Average case: {complexity.spaceComplexity.averageCase}</span>\n        </ComplexitiesContainer>\n      </ComplixtyContainer>\n    </DataContainer>\n  );\n};\n\nexport default AlgorithmData;\n","import SortingAlgorithmBtns from \"./components/AlgorithmButtons\";\nimport SortControl from \"./components/SortControl\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { AppContainer, GlobalStyle, ContainerTitle } from \"./AppStyles\";\nimport useSortingVisualizer from \"./hooks/useSortingVisualizer\";\nimport useArray from \"./hooks/useArray\";\nimport AlgorithmData from \"./components/AlgorithmData\";\n\nexport enum Algorithm {\n  BUBBLE = \"BUBBLE\",\n  QUICK = \"QUICK\",\n  MERGE = \"MERGE\"\n}\n\nexport default function App() {\n  const [algorithm, setAlgorithm] = useState<Algorithm>(Algorithm.BUBBLE);\n  const [size, setSize] = useState(20);\n  const [isSorted, setIsSorted] = useState(false);\n  const { array, setArray, getRandomArray } = useArray({ size, setIsSorted });\n  const [isSorting, setIsSorting] = useState(false);\n  const [sortingSpeed, setSortingSpeed] = useState(99);\n  const lengthInputRef = useRef<HTMLInputElement | null>(null);\n  const [showData, setShowData] = useState(false);\n\n  // Set array size\n  useEffect(() => {\n    if (!Array.isArray(getRandomArray)) getRandomArray();\n    if (lengthInputRef.current != null) {\n      lengthInputRef.current.value = \"\" + size;\n    }\n  }, [size]);\n\n  const capitalizedAlgorithm =\n    algorithm.slice(0, 1) + algorithm.slice(1).toLowerCase();\n\n  const sortControlProps = {\n    getRandomArray,\n    lengthInputRef,\n    setSize,\n    setIsSorting,\n    setSortingSpeed,\n    isSorted,\n    showData,\n    setShowData\n  };\n\n  const useSortingVisualizerProps = {\n    array,\n    algorithm,\n    isSorting,\n    setArray,\n    setIsSorting,\n    sortingSpeed,\n    setIsSorted\n  };\n\n  return (\n    <AppContainer>\n      <GlobalStyle />\n      <ContainerTitle>\n        Sorting Algorithm Visualizer: {capitalizedAlgorithm}\n      </ContainerTitle>\n      <SortControl {...sortControlProps} />\n      {useSortingVisualizer(useSortingVisualizerProps)}\n      {showData && <AlgorithmData {...{ algorithm }} />}\n      <SortingAlgorithmBtns {...{ setAlgorithm }} />\n    </AppContainer>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nif (rootElement) {\n  const root = createRoot(rootElement);\n\n  root.render(\n    <StrictMode>\n      <App />\n    </StrictMode>\n  );  \n} else {\n  throw new Error(\"Unable to load application: No root element.\");\n}\n\n"],"sourceRoot":""}