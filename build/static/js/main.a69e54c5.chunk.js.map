{"version":3,"sources":["components/componentStyles/AlgoButtonStyles.tsx","components/AlgorithmButtons.tsx","components/componentStyles/SortControlStyles.tsx","components/SortControl.tsx","AppStyles.tsx","sortingAlgorithms/BubbleSort.ts","sortingAlgorithms/MergeSort.ts","sortingAlgorithms/algoHelpers.ts","sortingAlgorithms/QuickSort.ts","components/componentStyles/AlgoArrayStyles.tsx","components/AlgorithmArray.tsx","hooks/useSortingVisualizer.tsx","hooks/useArray.tsx","components/componentStyles/AlgorithmDataStyles.tsx","components/AlgorithmData.tsx","App.tsx","index.tsx"],"names":["AlgoButton","styled","button","_templateObject","_taggedTemplateLiteral","props","hue","AlgoBtnGroup","div","_templateObject2","SortingAlgorithmsArray","SortingAlgorithmBtn","_ref","algorithm","index","setAlgorithm","buttonHue","_jsx","onClick","Algorithm","QUICK","MERGE","BUBBLE","changeAlgo","children","concat","SortingAlgorithmBtns","_ref2","map","sort","idx","SortControlContainer","ControlButton","bg","bgh","LengthInput","input","_templateObject3","ControlInputGroup","_templateObject4","ControlRangeInputSection","_templateObject5","ControlBtnGroup","_templateObject6","DataToggleButton","_templateObject7","showData","SortControl","getRandomArray","lengthInputRef","setSize","setIsSorting","setSortingSpeed","isSorted","setShowData","_jsxs","htmlFor","ref","onChange","e","target","value","type","max","min","id","Array","isArray","prev","GlobalStyle","createGlobalStyle","AppContainer","ContainerTitle","h1","bubbleSort","sortLineArray","animations","i","length","j","iter","push","array","_toConsumableArray","indexes","mergeSortHelper","start","end","statesInOrder","mid","Math","floor","k","pilesC","slice","temp","merge","mergeSort","sortedEntries","obj","Object","entries","a","b","isEqual","arrA","arrB","prototype","toString","call","quickSort","low","high","pivotIndex","pivotValue","pivot","partition","arr","dict","Set","result","currentElem","JSON","stringify","has","add","removeDuplicates","SortLine","isPivot","lineHue","SortLines","AlgorithmArray","currentLine","componentLinesRef","useRef","_useState","useState","setWidth","_slicedToArray","trackScreenWidth","_componentLinesRef$cu","_componentLinesRef$cu2","current","offsetWidth","useEffect","window","addEventListener","removeEventListener","SortLineComponent","_componentLinesRef$cu3","_componentLinesRef$cu4","_componentLinesRef$cu5","_componentLinesRef$cu6","_currentLine$lineData","_currentLine$lineData2","num","arrLength","lineWidth","style","height","offsetHeight","left","width","isLineSelected","isSorting","lineData","currentIndexes","includes","indexOf","_ref3","useSortingVisualizer","setArray","sortingSpeed","setIsSorted","_useState2","setCurrentIndexes","animationSpeed","handleAnimation","arguments","undefined","sortedArr","console","log","setTimeout","_bubbleSort","_mergeSort","_quickSort","newAnimationsArray","Error","startAnimation","algorithmArrayProps","_objectSpread","useArray","size","numbers","from","_","random","DataContainer","ComplexitiesContainer","ComplexityTitle","span","ComplixtyContainer","AlgorithmData","getAlgorithmComplexity","timeComplexity","worstCase","averageCase","spaceComplexity","complexity","setComplexity","App","_useState3","_useState4","_useState5","_useState6","_useArray","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","capitalizedAlgorithm","toLowerCase","sortControlProps","useSortingVisualizerProps","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.a69e54c5.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const AlgoButton = styled.button<{ hue: number }>`\n  background-color: hsl(${(props) => props.hue}, 88%, 70%);\n  cursor: pointer;\n  border: none;\n  padding: 0.5em 1.2em;\n  border-radius: 7px;\n  color: white;\n  font-weight: bold;\n  transition: 0.325s ease-in-out;\n  white-space: nowrap;\n  flex-basis: 7.5rem;\n\n  &:hover {\n    transform: scale(1.05);\n    background-color: hsl(${(props) => props.hue}, 88%, 60%);\n  }\n`;\n\nexport const AlgoBtnGroup = styled.div`\n  display: flex;\n  gap: 0.7rem;\n\n  @media (max-width: 400px) {\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n  }\n`;\n","import { Dispatch, SetStateAction } from \"react\";\nimport { Algorithm } from \"../App\";\nimport { AlgoButton, AlgoBtnGroup } from \"./componentStyles/AlgoButtonStyles\";\n\nconst SortingAlgorithmsArray = [\n  \"Quick\",\n  \"Bubble\",\n  \"Merge\"\n];\n\ninterface SortingAlgoBtnsProps {\n  setAlgorithm: Dispatch<SetStateAction<Algorithm>>;\n}\n\ninterface SortingAlgoBtnProps {\n  algorithm: string;\n  index: number;\n  setAlgorithm: Dispatch<SetStateAction<Algorithm>>;\n}\n\nconst SortingAlgorithmBtn = ({ algorithm, index, setAlgorithm }: SortingAlgoBtnProps) => {\n  const changeAlgo = (algorithm: string) => {\n    switch(algorithm) {\n      case \"Quick\":\n        setAlgorithm(Algorithm.QUICK);\n        return;\n      case \"Merge\":\n        setAlgorithm(Algorithm.MERGE);\n        return;\n      case \"Bubble\":\n        setAlgorithm(Algorithm.BUBBLE);\n        return;\n      default:\n        setAlgorithm(Algorithm.BUBBLE)\n    }\n  };\n\n  const buttonHue = index * 100;\n  return (\n    <AlgoButton hue={buttonHue} onClick={() => changeAlgo(algorithm)}>\n      {`${algorithm} Sort`}\n    </AlgoButton>\n  );\n};\n\nconst SortingAlgorithmBtns = ({ setAlgorithm }: SortingAlgoBtnsProps) => {\n\n  return (\n    <AlgoBtnGroup>\n      {SortingAlgorithmsArray.map((sort, idx) => (\n        <SortingAlgorithmBtn setAlgorithm={setAlgorithm} key={idx} index={idx} algorithm={sort} />\n      ))}\n    </AlgoBtnGroup>\n  );\n};\n\nexport default SortingAlgorithmBtns;\n","import styled from \"styled-components\";\n\nexport const SortControlContainer = styled.div`\n  display: flex;\n  gap: 1rem;\n  justify-content: space-evenly;\n  width: 100%;\n  flex-wrap: wrap;\n`;\n\ninterface ControlButtonProps {\n  bg: string;\n  bgh: string;\n}\n\nexport const ControlButton = styled.button<ControlButtonProps>`\n  padding: 0.4em 1.3em;\n  border: none;\n  border-radius: 7px;\n  cursor: pointer;\n  color: white;\n  font-weight: bold;\n  font-size: 1.1rem;\n  transition: 0.325s ease-in-out;\n  background-color: ${(props) => props.bg};\n\n  &:hover {\n    transform: scale(1.05);\n    background-color: ${(props) => props.bgh};\n  }\n`;\n\nexport const LengthInput = styled.input`\n  padding: 3px;\n  cursor: pointer;\n`;\n\nexport const ControlInputGroup = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 5px;\n  flex-wrap: wrap;\n  flex-direction: column;\n\n  & > label {\n    font-size: 1.3rem;\n  }\n`;\n\nexport const ControlRangeInputSection = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 5px;\n`;\n\nexport const ControlBtnGroup = styled.div`\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n`;\n\nexport const DataToggleButton = styled.button<{ showData: boolean }>`\n  box-shadow: ${(props) =>\n    !props.showData\n      ? \"0px 0px rgba(0, 0, 0, 0.1)\"\n      : \"inset 3px 3px 5px rgba(0, 0, 0, 0.1), inset -2px -2px 5px #fff\"};\n  padding: 0.4em 1.3em;\n  border: none;\n  border-radius: 7px;\n  cursor: pointer;\n  font-weight: bold;\n  transition: 0.325s ease-in-out;\n  font-size: 1.1rem;\n  white-space: nowrap;\n`;\n","import {\n  SortControlContainer,\n  ControlButton,\n  LengthInput,\n  ControlInputGroup,\n  ControlBtnGroup,\n  ControlRangeInputSection,\n  DataToggleButton\n} from \"./componentStyles/SortControlStyles\";\n\ninterface SortControlProps {\n  getRandomArray: () => void;\n  lengthInputRef: React.MutableRefObject<HTMLInputElement | null>;\n  setSize: React.Dispatch<React.SetStateAction<number>>;\n  setIsSorting: React.Dispatch<React.SetStateAction<boolean>>;\n  setSortingSpeed: React.Dispatch<React.SetStateAction<number>>;\n  isSorted: boolean;\n  showData: boolean;\n  setShowData: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst SortControl = ({\n  getRandomArray,\n  lengthInputRef,\n  setSize,\n  setIsSorting,\n  setSortingSpeed,\n  isSorted,\n  showData,\n  setShowData\n}: SortControlProps) => {\n  const sortArray = () => {\n    if (isSorted) {\n      getRandomArray();\n    }\n    setIsSorting(true);\n  };\n\n  return (\n    <SortControlContainer>\n      <ControlInputGroup>\n        <ControlRangeInputSection>\n          <label htmlFor=\"sort-length\">Size:</label>\n          <LengthInput\n            ref={lengthInputRef}\n            onChange={(e) => setSize(+e.target.value)}\n            type=\"range\"\n            max={70}\n            min={10}\n            id=\"sort-length\"\n          />\n        </ControlRangeInputSection>\n        <ControlRangeInputSection>\n          <label htmlFor=\"sort-speed\">Speed:</label>\n          <LengthInput\n            onChange={(e) => setSortingSpeed(+e.target.value)}\n            type=\"range\"\n            max={99}\n            min={1}\n            id=\"sort-speed\"\n          />\n        </ControlRangeInputSection>\n      </ControlInputGroup>\n      <ControlBtnGroup>\n        <ControlButton\n          bg=\"hsl(27, 87%, 60%)\"\n          bgh=\"hsl(27, 87%, 50%)\"\n          onClick={() => !Array.isArray(getRandomArray) && getRandomArray()}\n        >\n          Shuffle\n        </ControlButton>\n        <ControlButton onClick={sortArray} bg=\"#999\" bgh=\"#777\">\n          Sort\n        </ControlButton>\n        <DataToggleButton\n          showData={showData}\n          onClick={() => setShowData((prev) => !prev)}\n        >\n          Big O\n        </DataToggleButton>\n      </ControlBtnGroup>\n    </SortControlContainer>\n  );\n};\n\nexport default SortControl;\n","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  /* Box sizing rules */\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  /* Remove default margin */\n  body,\n  h1,\n  h2,\n  h3,\n  h4,\n  p,\n  figure,\n  blockquote,\n  dl,\n  dd {\n    margin: 0;\n  }\n\n  /* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\n  ul[role=\"list\"],\n  ol[role=\"list\"] {\n    list-style: none;\n  }\n\n  /* Set core root defaults */\n  html:focus-within {\n    scroll-behavior: smooth;\n  }\n\n  /* Set core body defaults */\n  body {\n    min-height: 100%;\n    text-rendering: optimizeSpeed;\n    line-height: 1.5;\n    font-family: \"Roboto\";\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #f9f9f9;\n    overflow-x: hidden;\n  }\n\n  html, #root, body {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  /* A elements that don't have a class get default styles */\n  a:not([class]) {\n    text-decoration-skip-ink: auto;\n  }\n\n  /* Make images easier to work with */\n  img,\n  picture {\n    max-width: 100%;\n    display: block;\n  }\n\n  /* Inherit fonts for inputs and buttons */\n  input,\n  button,\n  textarea,\n  select {\n    font: inherit;\n  }\n\n  /* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n  @media (prefers-reduced-motion: reduce) {\n    html:focus-within {\n      scroll-behavior: auto;\n    }\n\n    *,\n    *::before,\n    *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n    }\n  }\n`;\n\nexport const AppContainer = styled.div`\n  width: max(75vw, 300px);\n  max-width: 800px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 1.3rem;\n  border-radius: 15px;\n  background-color: white;\n  -webkit-box-shadow: 10px 15px 13px -1px rgba(0, 0, 0, 0.11);\n  -moz-box-shadow: 10px 15px 13px -1px rgba(0, 0, 0, 0.11);\n  box-shadow: 10px 15px 13px -1px rgba(0, 0, 0, 0.11);\n  gap: 1rem;\n\n  @media (max-width: 510px) {\n    width: 100%;\n    height: 100%;\n    justify-content: space-evenly;\n  }\n`;\n\nexport const ContainerTitle = styled.h1`\n  font-size: 1.6rem;\n  text-align: center;\n`;\n","import { AnimationsArray } from \"./algoHelpers\";\n\nconst bubbleSort = (sortLineArray: number[]): AnimationsArray => {\n  let animations = [];\n  for (let i = 0; i < sortLineArray.length; i++) {\n    for (let j = 0; j < sortLineArray.length - i - 1; j++) {\n      let itemA = sortLineArray[j];\n      let itemB = sortLineArray[j + 1];\n      if (itemA > itemB) {\n        let iter = sortLineArray[j];\n        sortLineArray[j] = sortLineArray[j + 1];\n        sortLineArray[j + 1] = iter;\n        animations.push({ array: [...sortLineArray], indexes: [j, j + 1] });\n      }\n    }\n  }\n  return animations;\n};\n\nexport default bubbleSort;\n","import { AnimationsArray } from \"./algoHelpers\";\n\nfunction merge(\n  array: number[],\n  start: number,\n  mid: number,\n  end: number,\n  statesInOrder: AnimationsArray\n) {\n  let k = start,\n    i = start,\n    j = mid + 1;\n  let pilesC = array.slice();\n  while (i <= mid && j <= end) {\n    if (pilesC[i] <= pilesC[j]) {\n      array[k++] = pilesC[i++];\n    } else {\n      array[k++] = pilesC[j++];\n    }\n    const temp = { array: array.slice(), indexes: [i, j, k] };\n    statesInOrder.push(temp);\n  }\n  while (i <= mid) {\n    array[k++] = pilesC[i++];\n    const temp = { array: array.slice(), indexes: [i, k] };\n    statesInOrder.push(temp);\n  }\n  while (j <= end) {\n    array[k++] = pilesC[j++];\n    const temp = { array: array.slice(), indexes: [j, k] };\n    statesInOrder.push(temp);\n  }\n}\n\nfunction mergeSortHelper(\n  array: number[],\n  start: number,\n  end: number,\n  statesInOrder: AnimationsArray\n) {\n  if (start === end) return;\n  const mid = Math.floor((start + end) / 2);\n  mergeSortHelper(array, start, mid, statesInOrder);\n  mergeSortHelper(array, mid + 1, end, statesInOrder);\n  merge(array, start, mid, end, statesInOrder);\n}\n\nfunction mergeSort(array: number[]): AnimationsArray {\n  let statesInOrder: AnimationsArray = [];\n  mergeSortHelper(array, 0, array.length - 1, statesInOrder);\n  return statesInOrder;\n}\n\nexport default mergeSort;\n","const sortedEntries = (obj: Object): [string, any][] => {\n  return Object.entries(obj).sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n};\n\nexport const isEqual = (arrA: any[], arrB: any[]): boolean => {\n  if (arrA.length !== arrB.length) return false;\n  for (let i = 0; i < arrA.length; i++) {\n    if (typeof arrA[i] !== typeof arrB[i]) return false;\n    if (Object.prototype.toString.call(arrA[i]) === \"\" + {}) {\n      if (!isEqual(sortedEntries(arrA[i]), sortedEntries(arrB[i]))) {\n        return false;\n      }\n    } else if (Array.isArray(arrA[i])) {\n      if (!isEqual(arrA[i], arrB[i])) return false;\n    } else {\n      if (arrA[i] !== arrB[i]) return false;\n    }\n  }\n  return true;\n};\n\nexport type AnimationsArray = {\n  array: number[];\n  indexes: number[];\n  pivot?: number;\n}[];\n\nexport function removeDuplicates(arr: AnimationsArray) {\n  const dict = new Set();\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let currentElem = JSON.stringify(arr[i]);\n    if (!dict.has(currentElem)) {\n      result.push(arr[i]);\n    }\n    dict.add(currentElem);\n  }\n  return result;\n}\n","import { removeDuplicates, AnimationsArray } from \"./algoHelpers\";\n\nfunction quickSort(array: number[]): AnimationsArray {\n  const animations: AnimationsArray = [];\n\n  if (array.length <= 1) {\n    return animations;\n  }\n\n  const partition = (low: number, high: number): number => {\n    let pivotIndex = low;\n    let pivotValue = array[low];\n    animations.push({\n      array: [...array],\n      indexes: [low, pivotIndex],\n      pivot: high\n    });\n\n    for (let i = low + 1; i <= high; i++) {\n      animations.push({\n        array: [...array],\n        indexes: [i, pivotIndex],\n        pivot: high\n      });\n\n      if (array[i] < pivotValue) {\n        pivotIndex++;\n        animations.push({\n          array: [...array],\n          indexes: [i, pivotIndex],\n          pivot: high\n        });\n        [array[i], array[pivotIndex]] = [array[pivotIndex], array[i]];\n        animations.push({\n          array: [...array],\n          indexes: [i, pivotIndex],\n          pivot: high\n        });\n      }\n    }\n\n    [array[low], array[pivotIndex]] = [array[pivotIndex], array[low]];\n    animations.push({\n      array: [...array],\n      indexes: [low, pivotIndex],\n      pivot: high\n    });\n    return pivotIndex;\n  };\n\n  const sort = (low: number, high: number): void => {\n    if (low < high) {\n      const pivotIndex = partition(low, high);\n      sort(low, pivotIndex);\n      sort(pivotIndex + 1, high);\n    }\n  };\n\n  sort(0, array.length - 1);\n  return removeDuplicates(animations);\n}\n\nexport default quickSort;\n","import styled from \"styled-components\";\n\ntype SortLineStyleProps = {\n  isPivot: boolean;\n  lineHue: number;\n};\n\nexport const SortLine = styled.div<SortLineStyleProps>`\n  position: absolute;\n  background-color: ${(props) =>\n    props.isPivot\n      ? `hsl(300, 83%, 65%)`\n      : `hsl(${props.lineHue}, 83%, 65%)`};\n  border: 1px solid;\n\n  &:hover > div {\n    display: block;\n  }\n`;\n\nexport const SortLines = styled.div`\n  position: relative;\n  transform: translate(-50%, -50%);\n  transform: rotate(180deg);\n  max-width: 100%;\n  background-color: #fafafa;\n  width: 100%;\n  height: 300px;\n  border-radius: 15px;\n`;\n","import { useRef, useEffect, useState } from \"react\";\nimport {\n  SortLine,\n  SortLines\n} from \"./componentStyles/AlgoArrayStyles\";\nimport { AnimationIndexes } from \"../hooks/useSortingVisualizer\";\n\ntype SortingLineProps = {\n  num: number;\n  arrLength: number;\n  idx: number;\n};\n\nexport type SortLinesComponentProps = {\n  array: number[];\n  currentLine?: {\n    isSorting: boolean;\n    lineData: AnimationIndexes;\n  };\n};\n\nconst AlgorithmArray = ({ array, currentLine }: SortLinesComponentProps) => {\n  const componentLinesRef = useRef<HTMLDivElement | null>(null);\n  const [, setWidth] = useState(0);\n\n  const trackScreenWidth = () => {\n    setWidth(componentLinesRef.current?.offsetWidth ?? 0);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", trackScreenWidth);\n\n    return () => {\n      return window.removeEventListener(\"resize\", trackScreenWidth);\n    };\n  }, []);\n\n  const SortLineComponent = ({ num, arrLength, idx }: SortingLineProps) => {\n    const lineWidth =\n      (componentLinesRef.current?.offsetWidth ?? 10) / arrLength;\n    let lineHeight =\n      (componentLinesRef.current?.offsetHeight ?? 300) / arrLength;\n\n    const style: React.CSSProperties = {\n      height: lineHeight * num,\n      left: idx * lineWidth,\n      width: lineWidth\n    };\n\n    const isLineSelected =\n      !!currentLine?.isSorting &&\n      currentLine?.lineData?.currentIndexes.includes(idx);\n\n    const isPivot =\n      !!currentLine?.isSorting && currentLine?.lineData.pivot === idx;\n\n    const lineHue = isLineSelected\n      ? currentLine?.lineData?.currentIndexes.indexOf(idx) * 100 + 50\n      : 212;\n\n    return (\n      <SortLine {...{ lineHue, isPivot, style }}>\n        {/* <SortLineNum>{num}</SortLineNum> */}\n      </SortLine>\n    );\n  };\n\n  return (\n    <SortLines ref={componentLinesRef}>\n      {array.map((num, idx, { length: arrLength }) => (\n        <SortLineComponent\n          key={idx}\n          num={num}\n          arrLength={arrLength}\n          idx={idx}\n        />\n      ))}\n    </SortLines>\n  );\n};\n\nexport default AlgorithmArray;\n","import { useState, useEffect } from \"react\";\nimport bubbleSort from \"../sortingAlgorithms/BubbleSort\";\nimport mergeSort from \"../sortingAlgorithms/MergeSort\";\nimport quickSort from \"../sortingAlgorithms/QuickSort\";\nimport AlgorithmArray from \"../components/AlgorithmArray\";\nimport { Algorithm } from \"../App\";\nimport { SortLinesComponentProps } from \"../components/AlgorithmArray\";\nimport { isEqual } from \"../sortingAlgorithms/algoHelpers\";\n\ntype AnimationsArray = {\n  array: number[];\n  indexes: number[];\n  pivot?: number;\n}[];\n\ninterface SortingVisualizerProps {\n  array: number[];\n  algorithm: Algorithm;\n  isSorting: boolean;\n  setArray: React.Dispatch<React.SetStateAction<number[]>>;\n  setIsSorting: React.Dispatch<React.SetStateAction<boolean>>;\n  sortingSpeed: number;\n  setIsSorted: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport type AnimationIndexes = {\n  currentIndexes: number[];\n  pivot?: number;\n};\n\nconst useSortingVisualizer = ({\n  array,\n  algorithm,\n  isSorting,\n  setArray,\n  setIsSorting,\n  sortingSpeed,\n  setIsSorted\n}: SortingVisualizerProps): JSX.Element => {\n  const [currentIndexes, setCurrentIndexes] = useState<AnimationIndexes>({\n    currentIndexes: []\n  });\n  const animationSpeed = (2000 / array.length) * ((100 - sortingSpeed) / 100);\n\n  const handleAnimation = (animations: AnimationsArray, index = 0) => {\n    if (animations[index] == null || !(\"indexes\" in animations[index])) return;\n\n    setCurrentIndexes({\n      currentIndexes: animations[index].indexes,\n      pivot: animations[index].pivot\n    });\n\n    const sortedArr = array.sort((a, b) => a - b);\n    if (isEqual(animations[index].array, sortedArr)) {\n      console.log(\"Animation Done\");\n      setIsSorted(true);\n      setIsSorting(false);\n    } else {\n      setTimeout(() => handleAnimation(animations, index + 1), animationSpeed);\n    }\n    setArray(animations[index].array);\n  };\n\n  const startAnimation = () => {\n    let newAnimationsArray: AnimationsArray = [];\n    switch (algorithm) {\n      case Algorithm.BUBBLE:\n        newAnimationsArray = bubbleSort(array) ?? [];\n        break;\n      case Algorithm.MERGE:\n        newAnimationsArray = mergeSort(array) ?? [];\n        break;\n      case Algorithm.QUICK:\n        newAnimationsArray = quickSort(array) ?? [];\n        break;\n      default:\n        throw new Error(algorithm + \" is not a valid algorithm.\");\n    }\n\n    handleAnimation(newAnimationsArray);\n  };\n\n  useEffect(() => {\n    if (isSorting) {\n      startAnimation();\n    }\n  }, [isSorting]);\n\n  const algorithmArrayProps: SortLinesComponentProps = {\n    array,\n    currentLine: {\n      isSorting,\n      lineData: currentIndexes\n    }\n  };\n\n  return <AlgorithmArray {...algorithmArrayProps} />;\n};\n\nexport default useSortingVisualizer;\n","import { useState, useEffect } from \"react\";\n\ntype UseArrayProps = {\n  size: number;\n  setIsSorted: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst useArray = ({ size, setIsSorted }: UseArrayProps) => {\n  const [array, setArray] = useState<number[]>([]);\n\n  const getRandomArray = () => {\n    setIsSorted(false);\n    const numbers = Array.from({ length: size }, (_, i) => i + 1);\n    numbers.sort(() => Math.random() - 0.5);\n    setArray(numbers);\n  };\n\n  useEffect(() => {\n    getRandomArray();\n  }, []);\n\n  return { array, setArray, getRandomArray };\n};\n\nexport default useArray;\n","import styled from \"styled-components\";\n\nexport const DataContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border: 2px solid #404040;\n  border-radius: 10px;\n  padding: 1rem;\n  gap: 1rem;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n`;\n\nexport const ComplexitiesContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 1.5rem;\n  width: 100%;\n`;\n\nexport const ComplexityTitle = styled.span`\n  font-size: 1.3rem;\n`;\n\nexport const ComplixtyContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import { useState, useEffect } from \"react\";\nimport { Algorithm } from \"../App\";\nimport {\n  DataContainer,\n  ComplexitiesContainer,\n  ComplexityTitle,\n  ComplixtyContainer\n} from \"./componentStyles/AlgorithmDataStyles\";\n\ntype BigONotation = {\n  worstCase: string;\n  averageCase: string;\n};\n\ntype Complexity = {\n  timeComplexity: BigONotation;\n  spaceComplexity: BigONotation;\n};\n\nconst AlgorithmData = ({ algorithm }: { algorithm: Algorithm }) => {\n  const getAlgorithmComplexity = (algorithm: Algorithm): Complexity => {\n    switch (algorithm) {\n      case Algorithm.BUBBLE:\n        return {\n          timeComplexity: { worstCase: \"O(n^2)\", averageCase: \"O(n^2)\" },\n          spaceComplexity: { worstCase: \"O(1)\", averageCase: \"O(1)\" }\n        };\n      case Algorithm.MERGE:\n        return {\n          timeComplexity: {\n            worstCase: \"O(n * log(n))\",\n            averageCase: \"O(n * log(n))\"\n          },\n          spaceComplexity: { worstCase: \"O(n)\", averageCase: \"O(n)\" }\n        };\n      case Algorithm.QUICK:\n        return {\n          timeComplexity: { worstCase: \"O(n^2)\", averageCase: \"O(n * log(n))\" },\n          spaceComplexity: { worstCase: \"O(n)\", averageCase: \"O(log(n))\" }\n        };\n      default:\n        return {\n          timeComplexity: { worstCase: \"O(n^2)\", averageCase: \"O(n^2)\" },\n          spaceComplexity: { worstCase: \"O(1)\", averageCase: \"O(1)\" }\n        };\n    }\n  };\n\n  const [complexity, setComplexity] = useState<Complexity>(\n    getAlgorithmComplexity(algorithm)\n  );\n\n  useEffect(() => {\n    setComplexity(getAlgorithmComplexity(algorithm));\n  }, [algorithm]);\n\n  return (\n    <DataContainer>\n      <ComplixtyContainer>\n        <ComplexityTitle>Time Complexity</ComplexityTitle>\n        <ComplexitiesContainer>\n          <span>Worst case: {complexity.timeComplexity.worstCase}</span>\n          <span>Average case: {complexity.timeComplexity.averageCase}</span>\n        </ComplexitiesContainer>\n      </ComplixtyContainer>\n      <ComplixtyContainer>\n        <ComplexityTitle>Space Complexity</ComplexityTitle>\n        <ComplexitiesContainer>\n          <span>Worst case: {complexity.spaceComplexity.worstCase}</span>\n          <span>Average case: {complexity.spaceComplexity.averageCase}</span>\n        </ComplexitiesContainer>\n      </ComplixtyContainer>\n    </DataContainer>\n  );\n};\n\nexport default AlgorithmData;\n","import SortingAlgorithmBtns from \"./components/AlgorithmButtons\";\nimport SortControl from \"./components/SortControl\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { AppContainer, GlobalStyle, ContainerTitle } from \"./AppStyles\";\nimport useSortingVisualizer from \"./hooks/useSortingVisualizer\";\nimport useArray from \"./hooks/useArray\";\nimport AlgorithmData from \"./components/AlgorithmData\";\n\nexport enum Algorithm {\n  BUBBLE = \"BUBBLE\",\n  QUICK = \"QUICK\",\n  MERGE = \"MERGE\"\n}\n\nexport default function App() {\n  const [algorithm, setAlgorithm] = useState<Algorithm>(Algorithm.BUBBLE);\n  const [size, setSize] = useState(20);\n  const [isSorted, setIsSorted] = useState(false);\n  const { array, setArray, getRandomArray } = useArray({ size, setIsSorted });\n  const [isSorting, setIsSorting] = useState(false);\n  const [sortingSpeed, setSortingSpeed] = useState(99);\n  const lengthInputRef = useRef<HTMLInputElement | null>(null);\n  const [showData, setShowData] = useState(false);\n\n  // Set array size\n  useEffect(() => {\n    if (!Array.isArray(getRandomArray)) getRandomArray();\n    if (lengthInputRef.current != null) {\n      lengthInputRef.current.value = \"\" + size;\n    }\n  }, [size]);\n\n  const capitalizedAlgorithm =\n    algorithm.slice(0, 1) + algorithm.slice(1).toLowerCase();\n\n  const sortControlProps = {\n    getRandomArray,\n    lengthInputRef,\n    setSize,\n    setIsSorting,\n    setSortingSpeed,\n    isSorted,\n    showData,\n    setShowData\n  };\n\n  const useSortingVisualizerProps = {\n    array,\n    algorithm,\n    isSorting,\n    setArray,\n    setIsSorting,\n    sortingSpeed,\n    setIsSorted\n  };\n\n  return (\n    <AppContainer>\n      <GlobalStyle />\n      <ContainerTitle>\n        Sorting Algorithm Visualizer: {capitalizedAlgorithm}\n      </ContainerTitle>\n      <SortControl {...sortControlProps} />\n      {useSortingVisualizer(useSortingVisualizerProps)}\n      {showData && <AlgorithmData {...{ algorithm }} />}\n      <SortingAlgorithmBtns {...{ setAlgorithm }} />\n    </AppContainer>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nif (rootElement) {\n  const root = createRoot(rootElement);\n\n  root.render(\n    <StrictMode>\n      <App />\n    </StrictMode>\n  );  \n} else {\n  throw new Error(\"Unable to load application: No root element.\");\n}\n\n"],"sourceRoot":""}